10.object detection from the image/video.

!pip install pycocotools


import torch
import torchvision
import pycocotools
from PIL import Image
from torchvision.transforms.functional import pil_to_tensor


holiday = Image.open(r"C:\Users\Admin\Downloads\cats_dogs_light/kids.jpg").convert('RGB')
holiday


kids_playing = Image.open("kids.jpg").convert('RGB')
kids_playing


holiday_tensor_int = pil_to_tensor(holiday)
kids_playing_tensor_int = pil_to_tensor(kids_playing)
holiday_tensor_int.shape
kids_playing_tensor_int.shape


holiday_tensor_int = holiday_tensor_int.unsqueeze(dim=0)
kids_playing_tensor_int = kids_playing_tensor_int.unsqueeze(dim=0)
holiday_tensor_int.shape, kids_playing_tensor_int.shape


print(holiday_tensor_int.min(), holiday_tensor_int.max())


holiday_tensor_float = holiday_tensor_int / 255.0
kids_playing_tensor_float = kids_playing_tensor_int / 255.0
print(holiday_tensor_float.min(), holiday_tensor_float.max())


from torchvision.models.detection import fasterrcnn_resnet50_fpn
object_detection_model = fasterrcnn_resnet50_fpn(pretrained=True, progress=False)
object_detection_model.eval(); ## Setting Model for Evaluation/Prediction
holiday_preds = object_detection_model(holiday_tensor_float)
holiday_preds


holiday_preds[0]["boxes"] = holiday_preds[0]["boxes"][holiday_preds[0]["scores"] > 0.8]
holiday_preds[0]["labels"] = holiday_preds[0]["labels"][holiday_preds[0]["scores"] > 0.8]
holiday_preds[0]["scores"] = holiday_preds[0]["scores"][holiday_preds[0]["scores"] > 0.8]
holiday_preds


kids_preds = object_detection_model(kids_playing_tensor_float)
kids_preds


kids_preds[0]["boxes"] = kids_preds[0]["boxes"][kids_preds[0]["scores"] > 0.8]
kids_preds[0]["labels"] = kids_preds[0]["labels"][kids_preds[0]["scores"] > 0.8]
kids_preds[0]["scores"] = kids_preds[0]["scores"][kids_preds[0]["scores"] > 0.8]
kids_preds


import urllib.request
import zipfile
import os

# Download the zip file
url = 'http://images.cocodataset.org/annotations/annotations_trainval2017.zip'
zip_path = 'annotations_trainval2017.zip'
urllib.request.urlretrieve(url, zip_path)

# Extract the zip file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall('.')

# Load the annotations
from pycocotools.coco import COCO
annFile = 'annotations/instances_val2017.json'
coco = COCO(annFile)



holiday_labels = coco.loadCats(holiday_preds[0]["labels"].numpy())
holiday_labels


kids_labels = coco.loadCats(kids_preds[0]["labels"].numpy())
kids_labels



from torchvision.utils import draw_bounding_boxes
from torchvision.transforms.functional import to_pil_image

# Create labels with confidence
kids_annot_labels = ["{}-{:.2f}".format(label, prob)
                     for label, prob in zip(kids_labels, kids_preds[0]["scores"].detach().numpy())]

# Assign colors based on label string
colors = ["red" if label == "person" else "green" for label in kids_labels]

# Draw bounding boxes
kids_output = draw_bounding_boxes(
    image=kids_playing_tensor_int[0],
    boxes=kids_preds[0]["boxes"],
    labels=kids_annot_labels,
    colors=colors,
    width=2
)

# Show output shape or display image
print(kids_output.shape)
to_pil_image(kids_output).show()



from torchvision.transforms.functional import to_pil_image
display(to_pil_image(kids_output))
