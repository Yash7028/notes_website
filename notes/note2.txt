2.regularization to prevent the model from overfitting.


# Importing the libraries
import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.linear_model import Lasso # L2 Regularization or Lasso
from sklearn.linear_model import Ridge # L1 Regularization or Ridge

# Import dataset
df_train = pd.read_csv('train.csv')
df_test = pd.read_csv('test.csv')

# Drop  duplicates if their  areany.
df_train =df_train.dropna()
df_test =df_test.dropna()

# Specifying training variables for Regression
x_train = df_train['x']
x_train = x_train.values.reshape(-1,1)
y_train = df_train['y']
y_train = y_train.values.reshape(-1,1)

# Specifying test variables for Regression
x_test = df_test['x']
x_test = x_test.values.reshape(-1,1)
y_test = df_test['y']
y_test = y_test.values.reshape(-1,1)

#Buildong Lasso Regression Model
lasso = Lasso()

#Fitting model on Train set
lasso.fit(x_train,y_train)

#Calculate Root Mean Squared Error.
print("Lasso Train RMSE:", np.sqrt(metrics.mean_squared_error(y_train, lasso.predict(x_train))),5)
print("Lasso Test RMSE:", np.sqrt(metrics.mean_squared_error(y_test, lasso.predict(x_test))),5)

# Buildin Ridge regression model
ridge = Ridge()

# fitting model on train set
ridge.fit(x_train,y_train)

# Calculating Root Mean Squared Error.
print("Ridge Train RMSE:", np.sqrt(metrics.mean_squared_error(y_train, ridge.predict(x_train))),5)
print("Ridge Test RMSE:", np.sqrt(metrics.mean_squared_error(y_test, ridge.predict(x_test))),5)



