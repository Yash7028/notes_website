pract 4 :

# 1. Update package list and install prerequisites
sudo apt-get update
sudo apt-get install -y ca-certificates curl

# 2. Create a directory for Docker keyrings
sudo install -m 0755 -d /etc/apt/keyrings

# 3. Download and add Dockerâ€™s GPG key
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc

sudo chmod a+r /etc/apt/keyrings/docker.asc


# 4. Add the Docker repository to Apt sources
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# 5. Update package list again
sudo apt-get update

# 6. Install Docker Engine, CLI, and other components
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose

# 7. Add current user to the Docker group (to run Docker without sudo)
sudo usermod -aG docker $USER

# 8. Apply group changes (without reboot)
newgrp docker

# 9. Verify Docker installation
docker --version
docker run hello-world  # Test if Docker is working correctly

optional 
# 9.1
sudo systemctl status docker
sudo systemctl start docker
sudo systemctl enable docker
sudo systemctl restart docker

#9.2
sudo usermod -aG docker $USER
newgrp docker
docker run hello-world  # Test if Docker is working correctly

# 10.Verify if docker is working
sudo docker pull busybox
sudo docker images


#Hyperledger Fabric:
Before installing hyper ledger make sure docker is up and running.
sudo systemctl status docker

hyper download
curl -sSL http://bit.ly/2ysbOFE | bash -s 2.2.0


#Remove Conflicting Containers
docker rm -f peer0.org1.example.com peer0.org2.example.com orderer.example.com


========================================================

sudo apt install jq

Before installing hyper ledger make sure docker is up and running.
sudo systemctl status docker

#hyper download
curl -sSL http://bit.ly/2ysbOFE | bash -s 2.2.0

#(Optional) Remove Conflicting Containers
docker rm -f peer0.org1.example.com peer0.org2.example.com orderer.example.com


cd fabric-samples/test-network
./network.sh down

./network.sh up createChannel -ca

./network.sh deployCC -ccn abac -ccp ../asset-transfer-abac/chaincode-go/ -ccl go

export PATH=${PWD}/../bin:${PWD}:$PATH

export FABRIC_CFG_PATH=$PWD/../config/

export
FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/org1.example.com/


fabric-ca-client register \
  --id.name creator1 \
  --id.secret creator1pw \
  --id.type client \
  --id.affiliation org1 \
  --id.attrs "abac.creator=true:ecert" \
  --tls.certfiles "${PWD}/organizations/fabric-ca/org1/tls-cert.pem"


fabric-ca-client enroll \
  -u https://creator1:creator1pw@localhost:7054 \
  --caname ca-org1 \
  -M "${PWD}/organizations/peerOrganizations/org1.example.com/users/creator1@org1.example.com/msp" \
  --tls.certfiles "${PWD}/organizations/fabric-ca/org1/tls-cert.pem"


cp "${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml" \
   "${PWD}/organizations/peerOrganizations/org1.example.com/users/creator1@org1.example.com/msp/config.yaml"


fabric-ca-client register \
  --id.name creator2 \
  --id.secret creator2pw \
  --id.type client \
  --id.affiliation org1 \
  --id.attrs "abac.creator=true:ecert" \
  --tls.certfiles "${PWD}/organizations/fabric-ca/org1/tls-cert.pem"


fabric-ca-client enroll \
  -u https://creator2:creator2pw@localhost:7054 \
  --caname ca-org1 \
  --enrollment.attrs "abac.creator" \
  -M "${PWD}/organizations/peerOrganizations/org1.example.com/users/creator2@org1.example.com/msp" \
  --tls.certfiles "${PWD}/organizations/fabric-ca/org1/tls-cert.pem"


cp "${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml" \
   "${PWD}/organizations/peerOrganizations/org1.example.com/users/creator2@org1.example.com/msp/config.yaml"



export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_MSPCONFIGPATH="${PWD}/organizations/peerOrganizations/org1.example.com/users/creator1@org1.example.com/msp"
export CORE_PEER_TLS_ROOTCERT_FILE="${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"
export CORE_PEER_ADDRESS="localhost:7051"

export TARGET_TLS_OPTIONS=(
  -o localhost:7050
  --ordererTLSHostnameOverride orderer.example.com
  --tls
  --cafile "${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"
  --peerAddresses localhost:7051
  --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"
  --peerAddresses localhost:9051
  --tlsRootCertFiles "${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"
)


peer chaincode invoke \
  "${TARGET_TLS_OPTIONS[@]}" \
  -C mychannel \
  -n abac \
  -c '{"function":"CreateAsset","Args":["Asset1","blue","20","100"]}'


peer chaincode query \
  -C mychannel \
  -n abac \
  -c '{"function":"ReadAsset","Args":["Asset1"]}'


export RECIPIENT="x509::CN=user1,OU=client,O=Hyperledger,ST=North Carolina,C=US::CN=ca.org1.example.com,O=org1.example.com,L=Durham,ST=North Carolina,C=US"
peer chaincode invoke \
  "${TARGET_TLS_OPTIONS[@]}" \
  -C mychannel \
  -n abac \
  -c '{"function":"TransferAsset","Args":["Asset1","'"$RECIPIENT"'"]}'


peer chaincode query \
  -C mychannel \
  -n abac \
  -c '{"function":"ReadAsset","Args":["Asset1"]}'


peer chaincode invoke \
  "${TARGET_TLS_OPTIONS[@]}" \
  -C mychannel \
  -n abac \
  -c '{"function":"UpdateAsset","Args":["Asset1","green","20","100"]}'


export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp


peer chaincode invoke \
  "${TARGET_TLS_OPTIONS[@]}" \
  -C mychannel \
  -n abac \
  -c '{"function":"UpdateAsset","Args":["Asset1","green","20","100"]}'


peer chaincode query \
  -C mychannel \
  -n abac \
  -c '{"function":"ReadAsset","Args":["Asset1"]}'


peer chaincode invoke \
  "${TARGET_TLS_OPTIONS[@]}" \
  -C mychannel \
  -n abac \
  -c '{"function":"DeleteAsset","Args":["Asset1"]}'


peer chaincode query \
  -C mychannel \
  -n abac \
  -c '{"function":"ReadAsset","Args":["Asset1"]}'


peer chaincode invoke \
  "${TARGET_TLS_OPTIONS[@]}" \
  -C mychannel \
  -n abac \
  -c '{"function":"CreateAsset","Args":["Asset2","red","20","100"]}'


./network.sh down
